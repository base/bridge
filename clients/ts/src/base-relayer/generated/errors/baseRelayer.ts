/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from '@solana/kit';
import { BASE_RELAYER_PROGRAM_ADDRESS } from '../programs';

/** UnauthorizedInitialization: Only the upgrade authority can initialize the relayer */
export const BASE_RELAYER_ERROR__UNAUTHORIZED_INITIALIZATION = 0x2ee0; // 12000
/** IncorrectRelayerProgram: Incorrect relayer program */
export const BASE_RELAYER_ERROR__INCORRECT_RELAYER_PROGRAM = 0x2ee1; // 12001
/** UnauthorizedConfigUpdate: Unauthorized to update configuration */
export const BASE_RELAYER_ERROR__UNAUTHORIZED_CONFIG_UPDATE = 0x2f44; // 12100
/** GasLimitTooLow: Gas limit too low */
export const BASE_RELAYER_ERROR__GAS_LIMIT_TOO_LOW = 0x2fa8; // 12200
/** GasLimitExceeded: Gas limit exceeded */
export const BASE_RELAYER_ERROR__GAS_LIMIT_EXCEEDED = 0x2fa9; // 12201
/** IncorrectGasFeeReceiver: Incorrect gas fee receiver */
export const BASE_RELAYER_ERROR__INCORRECT_GAS_FEE_RECEIVER = 0x300c; // 12300

export type BaseRelayerError =
  | typeof BASE_RELAYER_ERROR__GAS_LIMIT_EXCEEDED
  | typeof BASE_RELAYER_ERROR__GAS_LIMIT_TOO_LOW
  | typeof BASE_RELAYER_ERROR__INCORRECT_GAS_FEE_RECEIVER
  | typeof BASE_RELAYER_ERROR__INCORRECT_RELAYER_PROGRAM
  | typeof BASE_RELAYER_ERROR__UNAUTHORIZED_CONFIG_UPDATE
  | typeof BASE_RELAYER_ERROR__UNAUTHORIZED_INITIALIZATION;

let baseRelayerErrorMessages: Record<BaseRelayerError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  baseRelayerErrorMessages = {
    [BASE_RELAYER_ERROR__GAS_LIMIT_EXCEEDED]: `Gas limit exceeded`,
    [BASE_RELAYER_ERROR__GAS_LIMIT_TOO_LOW]: `Gas limit too low`,
    [BASE_RELAYER_ERROR__INCORRECT_GAS_FEE_RECEIVER]: `Incorrect gas fee receiver`,
    [BASE_RELAYER_ERROR__INCORRECT_RELAYER_PROGRAM]: `Incorrect relayer program`,
    [BASE_RELAYER_ERROR__UNAUTHORIZED_CONFIG_UPDATE]: `Unauthorized to update configuration`,
    [BASE_RELAYER_ERROR__UNAUTHORIZED_INITIALIZATION]: `Only the upgrade authority can initialize the relayer`,
  };
}

export function getBaseRelayerErrorMessage(code: BaseRelayerError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (baseRelayerErrorMessages as Record<BaseRelayerError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isBaseRelayerError<TProgramErrorCode extends BaseRelayerError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    BASE_RELAYER_PROGRAM_ADDRESS,
    code
  );
}
