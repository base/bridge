/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type Address,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
} from '@solana/kit';

/**
 * Instruction data for finalizing a native SOL transfer from Base to Solana.
 *
 * Contains the data needed to release escrowed SOL on Solana that corresponds
 * to a transfer initiated on Base. SOL is held in a PDA vault and released to
 * the recipient when finalized.
 */
export type FinalizeBridgeSol = {
  /**
   * The Solana public key of the recipient who will receive the SOL.
   * This must match the intended recipient specified in the original bridge message.
   */
  to: Address;
  /**
   * The amount of SOL to transfer, denominated in lamports (1 SOL = 1_000_000_000 lamports).
   * This amount will be transferred from the SOL vault to the recipient.
   */
  amount: bigint;
};

export type FinalizeBridgeSolArgs = {
  /**
   * The Solana public key of the recipient who will receive the SOL.
   * This must match the intended recipient specified in the original bridge message.
   */
  to: Address;
  /**
   * The amount of SOL to transfer, denominated in lamports (1 SOL = 1_000_000_000 lamports).
   * This amount will be transferred from the SOL vault to the recipient.
   */
  amount: number | bigint;
};

export function getFinalizeBridgeSolEncoder(): FixedSizeEncoder<FinalizeBridgeSolArgs> {
  return getStructEncoder([
    ['to', getAddressEncoder()],
    ['amount', getU64Encoder()],
  ]);
}

export function getFinalizeBridgeSolDecoder(): FixedSizeDecoder<FinalizeBridgeSol> {
  return getStructDecoder([
    ['to', getAddressDecoder()],
    ['amount', getU64Decoder()],
  ]);
}

export function getFinalizeBridgeSolCodec(): FixedSizeCodec<
  FinalizeBridgeSolArgs,
  FinalizeBridgeSol
> {
  return combineCodec(
    getFinalizeBridgeSolEncoder(),
    getFinalizeBridgeSolDecoder()
  );
}
