/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU64Decoder,
  getU64Encoder,
  type FixedSizeCodec,
  type FixedSizeDecoder,
  type FixedSizeEncoder,
  type ReadonlyUint8Array,
} from '@solana/kit';

export type ProtocolConfig = {
  /**
   * Block interval requirement for output root registration. Every Base block associated with a
   * submitted output root must be a multiple of this number.
   */
  blockIntervalRequirement: bigint;
  /** The Base evm address of SOL */
  remoteSolAddress: ReadonlyUint8Array;
};

export type ProtocolConfigArgs = {
  /**
   * Block interval requirement for output root registration. Every Base block associated with a
   * submitted output root must be a multiple of this number.
   */
  blockIntervalRequirement: number | bigint;
  /** The Base evm address of SOL */
  remoteSolAddress: ReadonlyUint8Array;
};

export function getProtocolConfigEncoder(): FixedSizeEncoder<ProtocolConfigArgs> {
  return getStructEncoder([
    ['blockIntervalRequirement', getU64Encoder()],
    ['remoteSolAddress', fixEncoderSize(getBytesEncoder(), 20)],
  ]);
}

export function getProtocolConfigDecoder(): FixedSizeDecoder<ProtocolConfig> {
  return getStructDecoder([
    ['blockIntervalRequirement', getU64Decoder()],
    ['remoteSolAddress', fixDecoderSize(getBytesDecoder(), 20)],
  ]);
}

export function getProtocolConfigCodec(): FixedSizeCodec<
  ProtocolConfigArgs,
  ProtocolConfig
> {
  return combineCodec(getProtocolConfigEncoder(), getProtocolConfigDecoder());
}
