/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  getAddressDecoder,
  getAddressEncoder,
  getArrayDecoder,
  getArrayEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getDiscriminatedUnionDecoder,
  getDiscriminatedUnionEncoder,
  getStructDecoder,
  getStructEncoder,
  getTupleDecoder,
  getTupleEncoder,
  getU32Decoder,
  getU32Encoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type GetDiscriminatedUnionVariant,
  type GetDiscriminatedUnionVariantContent,
  type ReadonlyUint8Array,
} from '@solana/kit';

/**
 * Either a concrete `Pubkey` or a PDA described by seeds and a program id.
 * When converting to `AccountMeta`, PDAs are derived with `Pubkey::find_program_address`.
 */

export type PubkeyOrPda =
  | { __kind: 'Pubkey'; fields: readonly [Address] }
  | { __kind: 'Pda'; seeds: Array<ReadonlyUint8Array>; programId: Address };

export type PubkeyOrPdaArgs = PubkeyOrPda;

export function getPubkeyOrPdaEncoder(): Encoder<PubkeyOrPdaArgs> {
  return getDiscriminatedUnionEncoder([
    [
      'Pubkey',
      getStructEncoder([['fields', getTupleEncoder([getAddressEncoder()])]]),
    ],
    [
      'Pda',
      getStructEncoder([
        [
          'seeds',
          getArrayEncoder(
            addEncoderSizePrefix(getBytesEncoder(), getU32Encoder())
          ),
        ],
        ['programId', getAddressEncoder()],
      ]),
    ],
  ]);
}

export function getPubkeyOrPdaDecoder(): Decoder<PubkeyOrPda> {
  return getDiscriminatedUnionDecoder([
    [
      'Pubkey',
      getStructDecoder([['fields', getTupleDecoder([getAddressDecoder()])]]),
    ],
    [
      'Pda',
      getStructDecoder([
        [
          'seeds',
          getArrayDecoder(
            addDecoderSizePrefix(getBytesDecoder(), getU32Decoder())
          ),
        ],
        ['programId', getAddressDecoder()],
      ]),
    ],
  ]);
}

export function getPubkeyOrPdaCodec(): Codec<PubkeyOrPdaArgs, PubkeyOrPda> {
  return combineCodec(getPubkeyOrPdaEncoder(), getPubkeyOrPdaDecoder());
}

// Data Enum Helpers.
export function pubkeyOrPda(
  kind: 'Pubkey',
  data: GetDiscriminatedUnionVariantContent<
    PubkeyOrPdaArgs,
    '__kind',
    'Pubkey'
  >['fields']
): GetDiscriminatedUnionVariant<PubkeyOrPdaArgs, '__kind', 'Pubkey'>;
export function pubkeyOrPda(
  kind: 'Pda',
  data: GetDiscriminatedUnionVariantContent<PubkeyOrPdaArgs, '__kind', 'Pda'>
): GetDiscriminatedUnionVariant<PubkeyOrPdaArgs, '__kind', 'Pda'>;
export function pubkeyOrPda<K extends PubkeyOrPdaArgs['__kind'], Data>(
  kind: K,
  data?: Data
) {
  return Array.isArray(data)
    ? { __kind: kind, fields: data }
    : { __kind: kind, ...(data ?? {}) };
}

export function isPubkeyOrPda<K extends PubkeyOrPda['__kind']>(
  kind: K,
  value: PubkeyOrPda
): value is PubkeyOrPda & { __kind: K } {
  return value.__kind === kind;
}
