/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { BRIDGE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getPartnerOracleConfigDecoder,
  getPartnerOracleConfigEncoder,
  type PartnerOracleConfig,
  type PartnerOracleConfigArgs,
} from '../types';

export const SET_PARTNER_ORACLE_CONFIG_DISCRIMINATOR = new Uint8Array([
  34, 48, 231, 135, 42, 113, 217, 157,
]);

export function getSetPartnerOracleConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_PARTNER_ORACLE_CONFIG_DISCRIMINATOR
  );
}

export type SetPartnerOracleConfigInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountBridge extends string | IAccountMeta<string> = string,
  TAccountGuardian extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountBridge extends string
        ? WritableAccount<TAccountBridge>
        : TAccountBridge,
      TAccountGuardian extends string
        ? ReadonlySignerAccount<TAccountGuardian> &
            IAccountSignerMeta<TAccountGuardian>
        : TAccountGuardian,
      ...TRemainingAccounts,
    ]
  >;

export type SetPartnerOracleConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  newConfig: PartnerOracleConfig;
};

export type SetPartnerOracleConfigInstructionDataArgs = {
  newConfig: PartnerOracleConfigArgs;
};

export function getSetPartnerOracleConfigInstructionDataEncoder(): Encoder<SetPartnerOracleConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['newConfig', getPartnerOracleConfigEncoder()],
    ]),
    (value) => ({
      ...value,
      discriminator: SET_PARTNER_ORACLE_CONFIG_DISCRIMINATOR,
    })
  );
}

export function getSetPartnerOracleConfigInstructionDataDecoder(): Decoder<SetPartnerOracleConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['newConfig', getPartnerOracleConfigDecoder()],
  ]);
}

export function getSetPartnerOracleConfigInstructionDataCodec(): Codec<
  SetPartnerOracleConfigInstructionDataArgs,
  SetPartnerOracleConfigInstructionData
> {
  return combineCodec(
    getSetPartnerOracleConfigInstructionDataEncoder(),
    getSetPartnerOracleConfigInstructionDataDecoder()
  );
}

export type SetPartnerOracleConfigInput<
  TAccountBridge extends string = string,
  TAccountGuardian extends string = string,
> = {
  /** The bridge account containing configuration */
  bridge: Address<TAccountBridge>;
  /** The guardian account authorized to update configuration */
  guardian: TransactionSigner<TAccountGuardian>;
  newConfig: SetPartnerOracleConfigInstructionDataArgs['newConfig'];
};

export function getSetPartnerOracleConfigInstruction<
  TAccountBridge extends string,
  TAccountGuardian extends string,
  TProgramAddress extends Address = typeof BRIDGE_PROGRAM_ADDRESS,
>(
  input: SetPartnerOracleConfigInput<TAccountBridge, TAccountGuardian>,
  config?: { programAddress?: TProgramAddress }
): SetPartnerOracleConfigInstruction<
  TProgramAddress,
  TAccountBridge,
  TAccountGuardian
> {
  // Program address.
  const programAddress = config?.programAddress ?? BRIDGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    bridge: { value: input.bridge ?? null, isWritable: true },
    guardian: { value: input.guardian ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.bridge),
      getAccountMeta(accounts.guardian),
    ],
    programAddress,
    data: getSetPartnerOracleConfigInstructionDataEncoder().encode(
      args as SetPartnerOracleConfigInstructionDataArgs
    ),
  } as SetPartnerOracleConfigInstruction<
    TProgramAddress,
    TAccountBridge,
    TAccountGuardian
  >;

  return instruction;
}

export type ParsedSetPartnerOracleConfigInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The bridge account containing configuration */
    bridge: TAccountMetas[0];
    /** The guardian account authorized to update configuration */
    guardian: TAccountMetas[1];
  };
  data: SetPartnerOracleConfigInstructionData;
};

export function parseSetPartnerOracleConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetPartnerOracleConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      bridge: getNextAccount(),
      guardian: getNextAccount(),
    },
    data: getSetPartnerOracleConfigInstructionDataDecoder().decode(
      instruction.data
    ),
  };
}
