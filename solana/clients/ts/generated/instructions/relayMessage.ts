/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlyAccount,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { BRIDGE_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';

export const RELAY_MESSAGE_DISCRIMINATOR = new Uint8Array([
  187, 90, 182, 138, 51, 248, 175, 98,
]);

export function getRelayMessageDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    RELAY_MESSAGE_DISCRIMINATOR
  );
}

export type RelayMessageInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountPayer extends string | IAccountMeta<string> = string,
  TAccountMessage extends string | IAccountMeta<string> = string,
  TAccountBridge extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountPayer extends string
        ? ReadonlySignerAccount<TAccountPayer> &
            IAccountSignerMeta<TAccountPayer>
        : TAccountPayer,
      TAccountMessage extends string
        ? WritableAccount<TAccountMessage>
        : TAccountMessage,
      TAccountBridge extends string
        ? ReadonlyAccount<TAccountBridge>
        : TAccountBridge,
      ...TRemainingAccounts,
    ]
  >;

export type RelayMessageInstructionData = { discriminator: ReadonlyUint8Array };

export type RelayMessageInstructionDataArgs = {};

export function getRelayMessageInstructionDataEncoder(): Encoder<RelayMessageInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([['discriminator', fixEncoderSize(getBytesEncoder(), 8)]]),
    (value) => ({ ...value, discriminator: RELAY_MESSAGE_DISCRIMINATOR })
  );
}

export function getRelayMessageInstructionDataDecoder(): Decoder<RelayMessageInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
  ]);
}

export function getRelayMessageInstructionDataCodec(): Codec<
  RelayMessageInstructionDataArgs,
  RelayMessageInstructionData
> {
  return combineCodec(
    getRelayMessageInstructionDataEncoder(),
    getRelayMessageInstructionDataDecoder()
  );
}

export type RelayMessageInput<
  TAccountPayer extends string = string,
  TAccountMessage extends string = string,
  TAccountBridge extends string = string,
> = {
  /**
   * A signer for the transaction. This instruction does not read or debit this
   * account directly; transaction fees are paid at the transaction level.
   */
  payer: TransactionSigner<TAccountPayer>;
  /**
   * The incoming message account containing the cross-chain message to be executed.
   * - Contains either a pure call message or a transfer message with additional instructions
   * - Must be mutable to mark the message as executed after processing
   * - Prevents replay attacks by tracking execution status
   */
  message: Address<TAccountMessage>;
  /**
   * The main bridge state account used to check pause status
   * - Uses PDA with BRIDGE_SEED for deterministic address
   */
  bridge: Address<TAccountBridge>;
};

export function getRelayMessageInstruction<
  TAccountPayer extends string,
  TAccountMessage extends string,
  TAccountBridge extends string,
  TProgramAddress extends Address = typeof BRIDGE_PROGRAM_ADDRESS,
>(
  input: RelayMessageInput<TAccountPayer, TAccountMessage, TAccountBridge>,
  config?: { programAddress?: TProgramAddress }
): RelayMessageInstruction<
  TProgramAddress,
  TAccountPayer,
  TAccountMessage,
  TAccountBridge
> {
  // Program address.
  const programAddress = config?.programAddress ?? BRIDGE_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    payer: { value: input.payer ?? null, isWritable: false },
    message: { value: input.message ?? null, isWritable: true },
    bridge: { value: input.bridge ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [
      getAccountMeta(accounts.payer),
      getAccountMeta(accounts.message),
      getAccountMeta(accounts.bridge),
    ],
    programAddress,
    data: getRelayMessageInstructionDataEncoder().encode({}),
  } as RelayMessageInstruction<
    TProgramAddress,
    TAccountPayer,
    TAccountMessage,
    TAccountBridge
  >;

  return instruction;
}

export type ParsedRelayMessageInstruction<
  TProgram extends string = typeof BRIDGE_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /**
     * A signer for the transaction. This instruction does not read or debit this
     * account directly; transaction fees are paid at the transaction level.
     */

    payer: TAccountMetas[0];
    /**
     * The incoming message account containing the cross-chain message to be executed.
     * - Contains either a pure call message or a transfer message with additional instructions
     * - Must be mutable to mark the message as executed after processing
     * - Prevents replay attacks by tracking execution status
     */

    message: TAccountMetas[1];
    /**
     * The main bridge state account used to check pause status
     * - Uses PDA with BRIDGE_SEED for deterministic address
     */

    bridge: TAccountMetas[2];
  };
  data: RelayMessageInstructionData;
};

export function parseRelayMessageInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedRelayMessageInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      payer: getNextAccount(),
      message: getNextAccount(),
      bridge: getNextAccount(),
    },
    data: getRelayMessageInstructionDataDecoder().decode(instruction.data),
  };
}
