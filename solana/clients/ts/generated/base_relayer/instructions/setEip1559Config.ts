/**
 * This code was AUTOGENERATED using the codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  transformEncoder,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type IAccountMeta,
  type IAccountSignerMeta,
  type IInstruction,
  type IInstructionWithAccounts,
  type IInstructionWithData,
  type ReadonlySignerAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
} from '@solana/kit';
import { BASE_RELAYER_PROGRAM_ADDRESS } from '../programs';
import { getAccountMetaFactory, type ResolvedAccount } from '../shared';
import {
  getEip1559ConfigDecoder,
  getEip1559ConfigEncoder,
  type Eip1559Config,
  type Eip1559ConfigArgs,
} from '../types';

export const SET_EIP1559_CONFIG_DISCRIMINATOR = new Uint8Array([
  197, 222, 225, 215, 15, 3, 82, 102,
]);

export function getSetEip1559ConfigDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(
    SET_EIP1559_CONFIG_DISCRIMINATOR
  );
}

export type SetEip1559ConfigInstruction<
  TProgram extends string = typeof BASE_RELAYER_PROGRAM_ADDRESS,
  TAccountCfg extends string | IAccountMeta<string> = string,
  TAccountGuardian extends string | IAccountMeta<string> = string,
  TRemainingAccounts extends readonly IAccountMeta<string>[] = [],
> = IInstruction<TProgram> &
  IInstructionWithData<Uint8Array> &
  IInstructionWithAccounts<
    [
      TAccountCfg extends string ? WritableAccount<TAccountCfg> : TAccountCfg,
      TAccountGuardian extends string
        ? ReadonlySignerAccount<TAccountGuardian> &
            IAccountSignerMeta<TAccountGuardian>
        : TAccountGuardian,
      ...TRemainingAccounts,
    ]
  >;

export type SetEip1559ConfigInstructionData = {
  discriminator: ReadonlyUint8Array;
  cfg: Eip1559Config;
};

export type SetEip1559ConfigInstructionDataArgs = { cfg: Eip1559ConfigArgs };

export function getSetEip1559ConfigInstructionDataEncoder(): Encoder<SetEip1559ConfigInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['cfg', getEip1559ConfigEncoder()],
    ]),
    (value) => ({ ...value, discriminator: SET_EIP1559_CONFIG_DISCRIMINATOR })
  );
}

export function getSetEip1559ConfigInstructionDataDecoder(): Decoder<SetEip1559ConfigInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['cfg', getEip1559ConfigDecoder()],
  ]);
}

export function getSetEip1559ConfigInstructionDataCodec(): Codec<
  SetEip1559ConfigInstructionDataArgs,
  SetEip1559ConfigInstructionData
> {
  return combineCodec(
    getSetEip1559ConfigInstructionDataEncoder(),
    getSetEip1559ConfigInstructionDataDecoder()
  );
}

export type SetEip1559ConfigInput<
  TAccountCfg extends string = string,
  TAccountGuardian extends string = string,
> = {
  /** The bridge account containing configuration */
  cfg: Address<TAccountCfg>;
  /** The guardian account authorized to update configuration */
  guardian: TransactionSigner<TAccountGuardian>;
  cfgArg: SetEip1559ConfigInstructionDataArgs['cfg'];
};

export function getSetEip1559ConfigInstruction<
  TAccountCfg extends string,
  TAccountGuardian extends string,
  TProgramAddress extends Address = typeof BASE_RELAYER_PROGRAM_ADDRESS,
>(
  input: SetEip1559ConfigInput<TAccountCfg, TAccountGuardian>,
  config?: { programAddress?: TProgramAddress }
): SetEip1559ConfigInstruction<TProgramAddress, TAccountCfg, TAccountGuardian> {
  // Program address.
  const programAddress = config?.programAddress ?? BASE_RELAYER_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    cfg: { value: input.cfg ?? null, isWritable: true },
    guardian: { value: input.guardian ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input, cfg: input.cfgArg };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  const instruction = {
    accounts: [getAccountMeta(accounts.cfg), getAccountMeta(accounts.guardian)],
    programAddress,
    data: getSetEip1559ConfigInstructionDataEncoder().encode(
      args as SetEip1559ConfigInstructionDataArgs
    ),
  } as SetEip1559ConfigInstruction<
    TProgramAddress,
    TAccountCfg,
    TAccountGuardian
  >;

  return instruction;
}

export type ParsedSetEip1559ConfigInstruction<
  TProgram extends string = typeof BASE_RELAYER_PROGRAM_ADDRESS,
  TAccountMetas extends readonly IAccountMeta[] = readonly IAccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    /** The bridge account containing configuration */
    cfg: TAccountMetas[0];
    /** The guardian account authorized to update configuration */
    guardian: TAccountMetas[1];
  };
  data: SetEip1559ConfigInstructionData;
};

export function parseSetEip1559ConfigInstruction<
  TProgram extends string,
  TAccountMetas extends readonly IAccountMeta[],
>(
  instruction: IInstruction<TProgram> &
    IInstructionWithAccounts<TAccountMetas> &
    IInstructionWithData<Uint8Array>
): ParsedSetEip1559ConfigInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = instruction.accounts![accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      cfg: getNextAccount(),
      guardian: getNextAccount(),
    },
    data: getSetEip1559ConfigInstructionDataDecoder().decode(instruction.data),
  };
}
