import { z } from "zod";
import { $ } from "bun";
import { join } from "path";

import { logger } from "@internal/logger";
import { findGitRoot } from "@internal/utils";

export const argsSchema = z.object({
  cluster: z
    .enum(["devnet"], {
      message: "Cluster must be either 'devnet'",
    })
    .default("devnet"),
  release: z
    .enum(["alpha", "prod"], {
      message: "Release must be either 'alpha' or 'prod'",
    })
    .default("prod"),
  program: z
    .enum(["bridge", "base-relayer"], {
      message: "Program must be either 'bridge' or 'base-relayer'",
    })
    .default("bridge"),
});

type GenerateIdlArgs = z.infer<typeof argsSchema>;

export async function handleGenerateIdl(args: GenerateIdlArgs): Promise<void> {
  try {
    logger.info("--- Generate IDL script ---");

    const projectRoot = await findGitRoot();
    logger.info(`Project root: ${projectRoot}`);

    const programDir = args.program === "bridge" ? "bridge" : "base_relayer";
    const solanaDir = join(projectRoot, `solana/programs/${programDir}`);
    const scriptsDir = join(projectRoot, "scripts");
    const solanaIdlPath = join(solanaDir, "idl.json");
    const scriptsIdlPath = join(
      scriptsDir,
      `src/internal/sol/${args.program === "bridge" ? "bridge" : "base-relayer"}.idl.ts`
    );

    logger.info("Generating IDL...");
    await $`anchor idl build -o ${solanaIdlPath}`.cwd(solanaDir);

    logger.info("Removing address key from IDL...");
    const idlFile = Bun.file(solanaIdlPath);
    const idl = await idlFile.json();
    delete idl.address;

    logger.info(`Writing IDL to ${solanaIdlPath}`);
    await idlFile.write(JSON.stringify(idl, null, 2));

    logger.info(`Writing IDL as TypeScript to ${scriptsIdlPath}`);
    await Bun.file(scriptsIdlPath).write(
      `// This file is auto-generated by the generate-idl script.
// Do not edit this file manually.

export const IDL = ${JSON.stringify(idl, null, 2)} as const;`
    );

    logger.success("IDL generation completed!");
  } catch (error) {
    logger.error("IDL generation failed:", error);
    throw error;
  }
}
